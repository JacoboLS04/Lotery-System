package org.example.controlador;

import org.example.modelo.Cliente;
import org.example.dao.ClienteDAO;
import org.example.vista.RegistroClienteUI;

import javax.swing.*;
import java.awt.event.*;
import java.util.List;

public class ControladorRegistroCliente {
    private RegistroClienteUI vista;
    private ClienteDAO dao;

    // Constructor: Initializes the controller and sets up the UI
    public ControladorRegistroCliente(RegistroClienteUI vista, ClienteDAO dao) {
        this.vista = vista;
        this.dao = dao;

        // Load initial data into the table
        actualizarTabla();

        // Configure event listeners
        configurarEventos();
    }

    // Configures all event listeners for the UI
    private void configurarEventos() {
        vista.getBtnNuevo().addActionListener(e -> limpiarFormulario());
        vista.getBtnRegistrar().addActionListener(e -> registrarCliente());
        vista.getBtnSeleccionar().addActionListener(e -> seleccionarCliente());
        vista.getBtnEliminar().addActionListener(e -> eliminarCliente());
        vista.getBtnVerificar().addActionListener(e -> verificarCliente());
        vista.getBtnBuscar().addActionListener(e -> buscarCliente());
        vista.getBtnFecha().addActionListener(e -> mostrarCalendario());

        vista.getTablaClientes().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    seleccionarCliente();
                }
            }
        });
    }

    // Clears the form fields
    private void limpiarFormulario() {
        vista.getCampoNombre().setText("");
        vista.getCampoCedula().setText("");
        vista.getCampoTelefono().setText("");
        vista.getCampoEmail().setText("");
        vista.getCampoBillete().setText("");
        vista.getCampoEncargado().setText(""); // Clear the "Encargado" field
        vista.getCampoNombre().requestFocus();
    }

    // Registers or updates a client
    private void registrarCliente() {
        if (vista.getCampoNombre().getText().isEmpty() ||
                vista.getCampoCedula().getText().isEmpty() ||
                vista.getCampoTelefono().getText().isEmpty() ||
                vista.getCampoBillete().getText().isEmpty() ||
                vista.getCampoEncargado().getText().isEmpty()) { // Validate "Encargado"

            vista.mostrarMensaje(
                    "Por favor complete los campos obligatorios: Nombre, Cédula, Teléfono, Billete y Encargado",
                    "Datos incompletos",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Create a new Cliente object with data from the UI
        Cliente cliente = new Cliente(
                null, // ID will be generated by the database
                vista.getCampoCedula().getText(),
                vista.getCampoNombre().getText(),
                vista.getCampoTelefono().getText(),
                vista.getCampoEmail().getText(),
                vista.getCampoBillete().getText(),
                false, // Default "verificado" to false
                vista.getCampoEncargado().getText()
        );

        Cliente clienteExistente = dao.buscarPorCedula(cliente.getCedula());
        if (clienteExistente != null) {
            dao.actualizarCliente(cliente);
            vista.mostrarMensaje("Cliente actualizado con éxito", "Actualización exitosa", JOptionPane.INFORMATION_MESSAGE);
        } else {
            dao.agregarCliente(cliente);
            vista.mostrarMensaje("Cliente registrado con éxito", "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
        }

        actualizarTabla();
        limpiarFormulario();
    }

    // Selects a client from the table and populates the form
    private void seleccionarCliente() {
        int filaSeleccionada = vista.getTablaClientes().getSelectedRow();
        if (filaSeleccionada >= 0) {
            String cedula = vista.getModeloTabla().getValueAt(filaSeleccionada, 1).toString();
            Cliente cliente = dao.buscarPorCedula(cedula);

            if (cliente != null) {
                vista.getCampoNombre().setText(cliente.getNombre());
                vista.getCampoCedula().setText(cliente.getCedula());
                vista.getCampoTelefono().setText(cliente.getTelefono());
                vista.getCampoEmail().setText(cliente.getEmail());
                vista.getCampoBillete().setText(cliente.getBillete());
                vista.getCampoEncargado().setText(cliente.getEncargado()); // Populate "Encargado" field
            } else {
                vista.mostrarMensaje("No se encontró el cliente con la cédula seleccionada.", "Cliente no encontrado", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            vista.mostrarMensaje("Por favor seleccione un cliente de la tabla", "Selección requerida", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Deletes a client
    private void eliminarCliente() {
        int filaSeleccionada = vista.getTablaClientes().getSelectedRow();
        if (filaSeleccionada >= 0) {
            String cedula = vista.getModeloTabla().getValueAt(filaSeleccionada, 1).toString();

            int confirmacion = vista.confirmar("¿Está seguro de eliminar este cliente?", "Confirmar eliminación");
            if (confirmacion == JOptionPane.YES_OPTION) {
                dao.eliminarCliente(cedula);
                actualizarTabla();
                limpiarFormulario();
                vista.mostrarMensaje("Cliente eliminado correctamente", "Eliminación exitosa", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            vista.mostrarMensaje("Por favor seleccione un cliente para eliminar", "Selección requerida", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Verifies a client
    private void verificarCliente() {
        int filaSeleccionada = vista.getTablaClientes().getSelectedRow();
        if (filaSeleccionada >= 0) {
            String cedula = vista.getModeloTabla().getValueAt(filaSeleccionada, 1).toString();
            Cliente cliente = dao.buscarPorCedula(cedula);

            if (cliente != null) {
                String claveAdmin = JOptionPane.showInputDialog(vista, "Ingrese la clave de administrador:");
                if ("lot01AXM".equals(claveAdmin)) {
                    cliente.setVerificado(true); // Set 'verificado' to true
                    dao.actualizarCliente(cliente); // Update in the database
                    vista.mostrarMensaje("Cliente verificado con éxito", "Verificación exitosa", JOptionPane.INFORMATION_MESSAGE);
                    actualizarTabla(); // Refresh the table
                } else {
                    vista.mostrarMensaje("Clave de administrador incorrecta", "Error de verificación", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            vista.mostrarMensaje("Por favor seleccione un cliente de la tabla", "Selección requerida", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Searches for a client by ID or name
    private void buscarCliente() {
        String criterioBusqueda = vista.solicitarInput("Ingrese la cédula o nombre del cliente a buscar:", "Buscar Cliente");

        if (criterioBusqueda != null && !criterioBusqueda.isEmpty()) {
            Cliente clientePorCedula = dao.buscarPorCedula(criterioBusqueda);
            if (clientePorCedula != null) {
                mostrarClienteEnFormulario(clientePorCedula);
                seleccionarEnTabla(clientePorCedula.getCedula());
                return;
            }

            List<Cliente> clientesPorNombre = dao.buscarPorNombre(criterioBusqueda);
            if (!clientesPorNombre.isEmpty()) {
                mostrarClienteEnFormulario(clientesPorNombre.get(0));
                seleccionarEnTabla(clientesPorNombre.get(0).getCedula());

                if (clientesPorNombre.size() > 1) {
                    vista.mostrarMensaje("Se encontraron " + clientesPorNombre.size() + " clientes. Se muestra el primero.", "Múltiples coincidencias", JOptionPane.INFORMATION_MESSAGE);
                }
                return;
            }

            vista.mostrarMensaje("No se encontró ningún cliente con los criterios especificados", "Búsqueda sin resultados", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Updates the table with the latest data
    private void actualizarTabla() {
        List<Cliente> listaClientes = dao.obtenerTodos(); // Retrieve all clients
        if (listaClientes == null || listaClientes.isEmpty()) {
            System.out.println("No clients found in the database.");
            vista.mostrarMensaje("No hay clientes para mostrar.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        vista.cargarDatosEnTabla(listaClientes); // Load data into the table
    }

    // Utility: Displays a client in the form
    private void mostrarClienteEnFormulario(Cliente cliente) {
        vista.getCampoNombre().setText(cliente.getNombre());
        vista.getCampoCedula().setText(cliente.getCedula());
        vista.getCampoTelefono().setText(cliente.getTelefono());
        vista.getCampoEmail().setText(cliente.getEmail());
        vista.getCampoBillete().setText(cliente.getBillete());
        vista.getCampoEncargado().setText(cliente.getEncargado()); // Display "Encargado"
    }

    // Utility: Selects a client in the table
    private void seleccionarEnTabla(String cedula) {
        for (int i = 0; i < vista.getModeloTabla().getRowCount(); i++) {
            if (vista.getModeloTabla().getValueAt(i, 1).equals(cedula)) {
                vista.getTablaClientes().setRowSelectionInterval(i, i);
                vista.getTablaClientes().scrollRectToVisible(vista.getTablaClientes().getCellRect(i, 0, true));
                break;
            }
        }
    }

    // Placeholder for calendar functionality
    private void mostrarCalendario() {
        vista.mostrarMensaje("Aquí se mostraría un calendario para seleccionar la fecha", "Selector de fecha", JOptionPane.INFORMATION_MESSAGE);
    }
}